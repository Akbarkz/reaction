"Represents a Reaction shop"
type Shop implements Node {
  "The shop ID"
  _id: ID!

  "The shop's primary address. Currently this is used as the shipping origin."
  address: Address

  currencies: [Currency]

  currency: Currency

  "Returns shop description"
  description: String

  "True if orders placed without an associated account will be accepted"
  isGuestCheckoutAllowed: Boolean!

  "Returns shop name"
  name: String

  "Returns a paged list of tags for this shop"
  tags(
    "If set, the query will return only top-level tags or only non-top-level tags. By default, both types of tags are returned."
    isTopLevel: Boolean,

    "Set to true if you want soft deleted tags to be included in the response"
    shouldIncludeDeleted: Boolean = false,

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = asc,

    "By default, tags are sorted by position. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = position
  ): TagConnection
}

extend type Query {
  "Returns a shop by ID"
  shop(id: ID!): Shop

  "Returns a shop by slug"
  shopBySlug(slug: String!): Shop

  "Returns the ID of the primary shop for the domain"
  primaryShopId: ID

  "Returns the primary shop for the domain"
  primaryShop: Shop
}
