"Represents a Reaction shop"
type Shop implements Node {
  "The shop ID"
  _id: ID!

  "The shop's primary address. Currently this is used as the shipping origin."
  address: Address

  "URLs for various shop assets in various sizes"
  brandAssets: ShopBrandAssets

  currencies: [Currency]

  currency: Currency

  "The ID of the shop's default navigation tree"
  defaultNavigationTreeId: String

  "The default navigation tree for this shop"
  defaultNavigationTree(language: String!): NavigationTree

  "Returns shop description"
  description: String

  "True if orders placed without an associated account will be accepted"
  isGuestCheckoutAllowed: Boolean!

  "Returns shop name"
  name: String

  "Returns a paged list of tags for this shop"
  tags(
    "If set, the query will return only top-level tags or only non-top-level tags. By default, both types of tags are returned."
    isTopLevel: Boolean,

    "Set to true if you want soft deleted tags to be included in the response"
    shouldIncludeDeleted: Boolean = false,

    after: ConnectionCursor,
    before: ConnectionCursor,
    first: ConnectionLimitInt,
    last: ConnectionLimitInt,
    sortOrder: SortOrder = asc,

    "By default, tags are sorted by position. Set this to sort by one of the other allowed fields"
    sortBy: TagSortByField = position
  ): TagConnection
}

"Input for the `setShopAddress` mutation"
input SetShopAddressInput {
  "The new or changed address"
  address: AddressInput!

  "An optional string identifying the mutation call, which will be returned in the response payload"
  clientMutationId: String

  "The ID of the shop this address is for"
  shopId: ID!
}

"The response from the `setShopAddress` mutation"
type SetShopAddressPayload {
  "The same string you sent with the mutation params, for matching mutation calls with their responses"
  clientMutationId: String

  "The updated shop"
  shop: Shop!
}

"URLs for various shop assets in various sizes"
type ShopBrandAssets {
  "URLs for the navigation bar brand logo image"
  navbarBrandImage: ImageSizes
}

extend type Mutation {
  "Set a new or updated address as the shop's primary address. Currently this is used as the shipping origin."
  setShopAddress(input: SetShopAddressInput!): SetShopAddressPayload!
}

extend type Query {
  "Returns a shop by ID"
  shop(id: ID!): Shop

  "Returns a shop by slug"
  shopBySlug(slug: String!): Shop

  "Returns the ID of the primary shop for the domain"
  primaryShopId: ID

  "Returns the primary shop for the domain"
  primaryShop: Shop
}
